package com.scan.annotate;

import java.lang.annotation.Annotation;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Stream;

public class OutPutLisOfAnnotClzsAndMethds {
	List<CapturedAnnotClzAndMethds> lisOfCap  = new ArrayList<CapturedAnnotClzAndMethds>();
	List<Class<? extends Annotation>> annInpClzLis = new ArrayList< Class<? extends Annotation> >();
	List< Class<? extends Annotation> > annInpMthds  = new ArrayList< Class<? extends Annotation> >();
	public void addClz(CapturedAnnotClzAndMethds cpACMs)
	{
		lisOfCap.add(cpACMs) ;
	}
	
	
	
	public static UUID dataToUUID(String str ) {
       
        return UUID.nameUUIDFromBytes(str.getBytes(StandardCharsets.UTF_8));
    }
	
	public String printResult()
	{
		StringBuilder sb = new StringBuilder () ;
		//sb.append("Result for ClassAnnotedWith:").append(annClz.getName()).append("\t").append("MethodAnnotedWith:").append(annMthds.toString()).append("::\n"); 
		lisOfCap.forEach(cap->{
			sb.append("\tClass:").append(cap.getAnoClz().getName()).append("\n");
			Arrays.stream(cap.anoClz.getAnnotations()).forEach(anncls->
			                                       sb.append(anncls.toString()).append("\n"));
			                                       
			Arrays.asList(mthd.getAnnotations()) ;
			annList.forEach(an -> {
				sb.append("\t\t\tValueOfAnnotaion:").append(an.toString().append("\n")) ;                                      
			
	        stream1.forEach(x -> System.out.println(x));
	        
	        
	       
			//sb.append
			cap.getMthodLis().forEach(mthd ->{
				sb.append("\t\tMethod:").append(mthd.getName()).append("\n");
				List<Annotation> annList =  Arrays.asList(mthd.getAnnotations()) ;
				annList.forEach(an -> {
					sb.append("\t\t\tValueOfAnnotaion:").append(an.toString()) ;	
				});
			});
		}) ;
		return sb.toString();
}
	public List<Class<? extends Annotation>> getAnnInpClzLis() {
		return annInpClzLis;
	}
	public void setAnnInpClzLis(List<Class<? extends Annotation>> annInpClzLis) {
		this.annInpClzLis = annInpClzLis;
	}
	public List<Class<? extends Annotation>> getAnnInpMthds() {
		return annInpMthds;
	}
	public void setAnnInpMthds(List<Class<? extends Annotation>> annInpMthds) {
		this.annInpMthds = annInpMthds;
	}



	public List<CapturedAnnotClzAndMethds> getLisOfCap() {
		return lisOfCap;
	}



	public void setLisOfCap(List<CapturedAnnotClzAndMethds> lisOfCap) {
		this.lisOfCap = lisOfCap;
	}
}
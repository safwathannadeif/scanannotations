package com.scan.annotate.logging;



import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;
import java.util.logging.Logger;



public class LoggerRef {
	private final static String workLogFileName ="C:/LogDirectory/log" ;
	private final static String nameId="Server" ;
	private static  Logger ServerLogger = null ;

public static synchronized void  makeLogRef()
{
//	
//try {
	//Remove all the Handlers 
	Logger loggerToUse = Logger.getLogger(nameId); //Server | Client
	assert loggerToUse != null ;
	loggerToUse.setUseParentHandlers(false) ;//No Console
	Handler[] handlers = loggerToUse.getHandlers();
	for(Handler handler : handlers) {
		loggerToUse.removeHandler(handler);
	}
	//loggerToUse.setUseParentHandlers(true ) ;// true == yes  Console
	//logger = LogManager.getLogManager().getLogger(nameId);
	//loggerToUse.setUseParentHandlers(false) ;//No Console
	//java.util.logging.ConsoleHandler.level = NONE ;
	// Construct a default FileHandler.
	//loggerToUse.setLevel(Level.ALL);
	//ConsoleHandler consoleHandler = new ConsoleHandler();
	//consoleHandler.setLevel(Level.ALL);
	//
	//loggerToUse.addHandler(new StreamHandler(System.out,  new LogFormat())) ;
	//loggerToUse.addHandler(new StreamHandler(System.err,  new LogFormat())) ; 
	
	Handler  consoleHandler = new ConsoleHandler();
	consoleHandler.setFormatter(new LogFormat());
	//consoleHandler.setLevel(Level.ALL);
	loggerToUse.addHandler(consoleHandler);
//	Handler fh = new FileHandler(workLogFileName,600*1024,4,false);
//	fh.setLevel(Level.ALL);
//	fh.setFormatter(new LogFormat());  // Set the  Logformat
//	loggerToUse.addHandler(fh);
	//System.out.println("fh setFormatter Done >>>>>>>>>>>>>>>>>>>>>>>") ;
	ServerLogger = loggerToUse ;

//	catch (SecurityException | IOException e) {
//	e.printStackTrace();
//	System.out.println("Problem Setting the logging logFileName:[" + workLogFileName +"]" ) ; 
//	System.out.println("InititLogs.logInit2, calling  exit and Forcing Abort") ;
//	System.exit(-1);
//	}

}

public static Logger getServerLogger() {
	if ( ServerLogger == null ) makeLogRef() ;
	assert ServerLogger != null : "here is null >>" ;
	//ServerLogger.info("Message inside getLogger");
	return ServerLogger;
}

}